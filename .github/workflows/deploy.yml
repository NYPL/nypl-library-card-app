name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (qa or production)"
        required: true
        type: string
        default: "qa"

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate input environment
        run: |
          VALID_ENVS="qa production"
          if [[ ! " $VALID_ENVS " =~ " ${{ inputs.environment }} " ]]; then
            echo "Invalid environment: ${{ inputs.environment }}"
            echo "Must be one of: $VALID_ENVS"
            exit 1
          fi

  unit-tests:
    uses: ./.github/workflows/unit-tests.yml

  playwright-tests:
    uses: ./.github/workflows/playwright-tests.yml

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [unit-tests, playwright-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::946183545209:role/GithubActionsDeployerRole
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nypl-library-card-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${{ vars.ECR_LATEST_TAG }}

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nypl-library-card-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ vars.ECR_LATEST_TAG }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --force-new-deployment
